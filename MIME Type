import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    public static void main(String args[]) {
        final Scanner in = new Scanner(System.in);
        final int N = in.nextInt(); // Number of elements which make up the association table.
        in.nextLine();
        final int Q = in.nextInt(); // Number Q of file names to be analyzed.
        in.nextLine();
        
        final ArrayList<String> extensions = new ArrayList<String>();
        final ArrayList<String> mimes = new ArrayList<String>();
        final ArrayList<String> fnames = new ArrayList<String>();
        
        for (int i = 0; i < N; i++) {
            String EXT = in.next(); // file extension
            extensions.add(EXT.toLowerCase());
            String MT = in.next(); // MIME type.
            mimes.add(MT);
            in.nextLine();
        }
    
        for (int i = 0; i < Q; i++) {
            String FNAME = in.nextLine(); // One file name per line.
            fnames.add(FNAME);
        }
        
        boolean found = false;
        String extension;

        for(int i = 0; i < Q; ++i){
            int index = fnames.get(i).lastIndexOf(".");
            if(index != -1){
                extension = fnames.get(i).substring(index + 1).toLowerCase();
                if(extensions.contains(extension))
                    for(int j = 0 ; j < N; ++j){
                        if(extension.equals(extensions.get(j))){
                            System.out.println(mimes.get(j));
                            found = true;
                            break;
                        }
                    }
                else
                    System.out.println("UNKNOWN");
                found = false;
            }
            else {
                System.out.println("UNKNOWN");
            }
        }
    }
}
